"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[176],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return g}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),g=o,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||s;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2832:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),s=(r(7294),r(3905)),a=["components"],i={},l="React (server)",c={unversionedId:"sdks/react-ssr",id:"sdks/react-ssr",title:"React (server)",description:"Progressively comes with a first class support for React and its major frameworks leveraging Server Side Rendering, at runtime. By following this guide, you should be able to start an application that initialize the flags on the server but also to make them available on the client with a websocket subscription.",source:"@site/docs/sdks/react-ssr.md",sourceDirName:"sdks",slug:"/sdks/react-ssr",permalink:"/docs/sdks/react-ssr",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdks/react-ssr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/docs/sdks/javascript"},next:{title:"React (client)",permalink:"/docs/sdks/react"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Ready to go snippet (Nextjs)",id:"ready-to-go-snippet-nextjs",level:2},{value:"Usage on your own server",id:"usage-on-your-own-server",level:2},{value:"Passing custom fields",id:"passing-custom-fields",level:2}],d={toc:u};function g(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"react-server"},"React (server)"),(0,s.kt)("p",null,"Progressively comes with a first class support for React and its major frameworks leveraging Server Side Rendering, at runtime. By following this guide, you should be able to start an application that initialize the flags on the server but also to make them available on the client with a websocket subscription."),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @progressively/react\n")),(0,s.kt)("h2",{id:"ready-to-go-snippet-nextjs"},"Ready to go snippet (Nextjs)"),(0,s.kt)("p",null,"The following snippet shows how to use Progressively with ",(0,s.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Nextjs"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { ProgressivelyProvider, useFlags } from "@progressively/react";\nimport { getSSRProps } from "@progressively/react/lib/ssr";\n\nconst FlaggedComponent = () => {\n  // Get the flags from the component\n  const { flags } = useFlags();\n\n  // Check the flag value and display the good variant\n  if (flags.newHomepage) {\n    return <div>New variant</div>;\n  }\n\n  return <div>Old variant</div>;\n};\n\nexport default function MyPage({ progressivelyProps }) {\n  // Get the progressivelyProps from the getServerSideProps and pass it to the provider\n  return (\n    <ProgressivelyProvider {...progressivelyProps}>\n      <FlaggedComponent />\n    </ProgressivelyProvider>\n  );\n}\n\nexport async function getServerSideProps() {\n  // Initialize the flags on the server and pass it to the client\n  const { ssrProps, cookies } = await getSSRProps("valid-sdk-key", {\n    fields: {\n      email: "marvin.frachet@something.com",\n      id: "1",\n    },\n  });\n\n  // This is mandatory in order to keep track of anonymous users.\n  // In the future, it might disappear\n  res.setHeader("set-cookie", cookies);\n\n  return {\n    props: {\n      progressivelyProps: ssrProps,\n    },\n  };\n}\n')),(0,s.kt)("h2",{id:"usage-on-your-own-server"},"Usage on your own server"),(0,s.kt)("p",null,"You may (probably) want to host Progressively on your own server and make sure your client application hits the good apis. In order to do so, you can specify the API and Websocket URL by passing ",(0,s.kt)("inlineCode",{parentName:"p"},"apiUrl")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"websocketUrl")," to the ",(0,s.kt)("inlineCode",{parentName:"p"},"getSSRProps"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const { ssrProps, cookies } = await getSSRProps(CLIENT_KEY, {\n  apiUrl: "https://your-hosting-server",\n  websocketUrl: "wss://your-hosting-server",\n});\n')),(0,s.kt)("h2",{id:"passing-custom-fields"},"Passing custom fields"),(0,s.kt)("p",null,"With Progressively, you can pass extra fields to the server in order to create customized strategies. For instance, you can create a strategy that targets a specific email, let's say: ",(0,s.kt)("inlineCode",{parentName:"p"},"john.doe@gmail.com"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const { ssrProps, cookies } = await getSSRProps(CLIENT_KEY, {\n  fields: { email: "john.doe@gmail.com" },\n});\n')))}g.isMDXComponent=!0}}]);